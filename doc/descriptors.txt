Descriptors
===========

In the MongoKit philosophy, the structure must be simple, clear and readable. So all descriptors (like validation, requirement, default values etc...) are described outside of the structure.
Descriptors can be combined and can apply the same field.

required
--------

This descriptor describes the required fields::

    class MyDoc(Document):
        structure = {
            "bar":unicode,
            "foo":{
                "spam":unicode,
                "eggs":int,
            }
        }
        required = ['bar', 'foo.spam']

If you want to reach nested fields, just use the dot notation.

default_values
--------------

This descriptors allow to specify a default value at the creation of the document::

   class MyDoc(Document):
        structure = {
            "bar":unicode,
            "foo":{
                "spam":unicode,
                "eggs":int,
            }
        }
        default_values = {'bar':u'hello', 'foo.eggs':4}

Note that the default value must be a valid type (here unicode)

validators
----------

This descriptor bring a validation layer to a field. It take a function which returns a `False` if the validation fails, `True` otherwise::

    import re
    def email_validator(value):
       email = re.compile(r"(?:^|\s)[-a-z0-9_.]+@(?:[-a-z0-9]+\.)+[a-z]{2,6}(?:\s|$)",re.IGNORECASE)
       return bool(email.match(value))

    class MyDoc(Document):
       structure = {
          "email": unicode,
          "foo": {
            "eggs":int,
          }
       }
       validators = {
           "email": email_validator,
           "foo.eggs": lambda x: x > 10
       }

You can add custom message in your validators::

    def email_validator(value):
       email = re.compile(r"(?:^|\s)[-a-z0-9_.]+@(?:[-a-z0-9]+\.)+[a-z]{2,6}(?:\s|$)",re.IGNORECASE)
       if not bool(email.match(value))
          raise ValidatorError("%s is not a valid email")

Note that it is a good thing to add one more "%s" in message. This will be used to describes the failing field name.

You can also pass params to your validator by wrapping it in a class:

        class MinLengthValidator(object):
            def __init__(self, min_length):
                self.min_length = min_length

            def __call__(self, value):
                if len(value) >= self.min_length:
                    return True
                else:
                    raise Exception('%s must be at least ' + str(self.min_length) + ' characters long.')

        class Client(Document):
            structure = {
              'first_name': unicode
            }
            validators = { 'first_name': MinLengthValidator(2) }

In this example, `first_name` must contain at least 2 characters.

i18n
----

This descriptor will tell MongoKit that a field has multiple translation. Please see the `i18n section`_ for more details::

   class MyDoc(Document):
        structure = {
            "bar":unicode,
            "foo":{
                "spam":unicode,
                "eggs":int,
            }
        }
        i18n = ['bar', 'foo.eggs']


.. _`i18n section`: i18n.html

Adding complex validation
=========================

If the use of a validator is not enough, you can overload the validation method
to fit your needs.

Example the following document:

>>> class MyDoc(Document):
...     structure={
...             "foo":int,
...             "bar":int,
...             "baz":unicode,
...     }
... 

We want to be sure that before saving our object, foo is greater than bar and baz is
unicode(foo). To do that, we just overload the validation method::

    def validate(self, *args, **kwargs):
        assert self['foo'] > self['bar']
        assert self['baz'] == unicode(self['foo'])
        super(MyDoc, self).validate(*args, **kwargs)



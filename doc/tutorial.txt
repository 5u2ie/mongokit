=================
MongoKit Tutorial
=================

First of all, Mongokit relied heavily on pymongo. As such, all pymongo API is
exposed. If you don't find what you want in the Mongokit document, please take
a look at pymongo_ 's one.  All the pymongo API is exposed via connection,
database and collection so Connection, Database and Collection are wrapper
around pymongo objects.

.. _pymongo : http://api.mongodb.org/python/

Simple Example
==============

>>> from mongokit import *

>>> import datetime

>>> class BlogPost(Document):
...     structure = {
...             'title':unicode,
...             'body':unicode,
...             'author':unicode,
...             'date_creation':datetime.datetime,
...             'rank':int,
...             'tags': [unicode],
...     }
...     required_fields = ['title','author', 'date_creation']
...     default_values = {'rank':0, 'date_creation':datetime.datetime.utcnow}
... 


The structure is simply a dictionary with python type. In this example, `title` must be unicode and `rank`
must be an int.

Optionally, you can add some descriptors. In order to specify fields which are required, just add a `required_fields`
attribute. This is a simple list which list all required_fields (ie, those field must not be None when validating).

Same thing with the `default_values` attribute. This is a dict where you can specify default values. Note that
you can pass callable object (like a datetime).

Now, fire a connection and register the ``BlogPost`` object:

>>> con = Connection()
>>> con.register([BlogPost])

Optionally, the register method can be used as a decorator::

        @con.register
        class BlogPost(Document):
            structure = {...}

Let's do some cleanup before continue:

>>> con.test.drop_collection('tutorial')

Now, let's create a blogpost we want to work on the collection "tutorial" on the database "test":

>>> tutorial = con.test.tutorial

.. topic:: new in version 0.5.13

    now you can add the collection and the database name into a Document::

        @con.register
        class BlogPost(Document):
            __collection__ = 'blog_posts'
            __database__ = 'tutorial'
            structure = {...}

    so now, we can have access to our document directly from the connection::
        
        >>> bp = con.BlogPost()

    Note that if you want to specify the `__database__` you *should* also specify the `__collection__` attribute.
    
    It is also possible to access the documents from the database::
        
        >>> bp = con.test.BlogPost() # this will use __collection__ as collection name

>>> bp = tutorial.BlogPost()
>>> bp
{'body': None, 'title': None, 'date_creation': datetime.datetime(...), 'rank': 0, 'author': None} 

Note that `date_creation` was automatically filled by `utcnow()` and rank is 0.

>>> bp['title'] = "my first blog post"
>>> bp.validate() 
Traceback (most recent call last):
...
SchemaTypeError: title must be an instance of unicode not str

`str` type is not authorized, you must use unicode : 

>>> bp['title'] = u"my first blog post"

`validate` method will check if required fields are set :

>>> bp.validate()
Traceback (most recent call last):
...
RequireFieldError: author is required

>>> bp['author'] = u'myself'
>>> bp.validate()

Note that `save` will call the `validate` method, so you don't have to validate
each time.

>>> bp.save()

You can disable or force the validation with the `validate` argument in the `save` method:

>>> bp.save(validate=False)

Dot notation 
============

If you want to use the dot notation (ala json), you must set the
`use_dot_notation` attribute to True:

>>> class TestDotNotation(Document):
...     structure = {
...         "foo":{ "bar":unicode}
...     }
...     use_dot_notation=True

>>> con.register([TestDotNotation])
>>> doc = tutorial.TestDotNotation()
>>> doc.foo.bar = u"bla"
>>> doc
{'foo': {'bar': u'bla'}}

Note that if an attribute is not in structure, the value will be added as attribute :

>>> doc.arf = 3 # arf is not in structure
>>> doc
{'foo': {'bar': u'bla'}}

If you want to be warned when a value is set as attribute, you can set the `dot_notation_warning` attribute as True.

Changing collection dynamically
===============================

But you might need to specify a different db or collection dynamically. For instance,
say you want to store a User by database. 

>>> class User(Document):
...     structure = {'login':unicode, 'screen_name':unicode}

>>> con.register([User])

Like pymongo, MongoKit allow you to change those parameters on the fly:

>>> user_name = 'namlook'
>>> user_col = con[user_name].profile

Now, we can query the database by passing our new collection :

>>> profiles = user_col.User.find()

>>> user = user_col.User()
>>> user['login'] = 'namlook'
>>> user['screen_name'] = 'Namlook'

Calling `user.save()` will save the object into the database 'namlook' in the collection 'profile'.



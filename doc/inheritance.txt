
= polymorphisme with mongokit =

In order to build an object wich inherite from two or more object,
we have to do it by hand.

In the following example, we have to object A and B wich herite from Root.
And we want to build an object C from A and B. Let's build Root, A and B
first :

>>> from mongokit import *
>>> class Root(MongoDocument):
...     structure = {
...         "root":int,
...     }
...

>>> class A(Root):
...     structure = {
...         "a_field":unicode,
...     }
...

>>> class B(Root):
...     structure = {
...         "b_field":unicode,
...     }
...

Now, let's build C. We have to disable auto_inheritance :

>>> class C(A,B):
...     auto_inheritance = False
...     structure = A.structure
...     structure.update(B.structure)
...     structure.update({"c_field":float})
...

We first get the structure from A and update it with the structure from B.
And then, we update the structure with the C structure.

Same thing append with required_fields and default_values :

>>> class C(A,B):
...     auto_inheritance = False
...     structure = A.structure
...     structure.update(B.structure)
...     structure.update({"c_field":float})
...     required_fields = A.required_fields + B.required_fields
...

>>> c = C()
>>> c == {'b_field': None, 'c_field': None, 'a_field': None}
True

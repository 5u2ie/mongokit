========
MongoKit
========

MongoDB_ is a great schema-less document oriented database. It have a lot of
driver for many langages (python, ruby, perl, java, php...).

.. _MongoDB : http://www.mongodb.org/display/DOCS/Home

MongoKit is a python module that brings structured schema and validation layer
on top of the great pymongo driver. It has be written to be simpler and lighter
as possible with the KISS and DRY principles in mind.

Features
========

 * schema validation (wich use simple python type for the declaration)
 * doted notation
 * nested and complex schema declaration
 * required fields validation
 * default values
 * custom validators
 * inheritance and polymorphisme support
 * versionized document support (still in alpha stage)
 * partial auth support (it brings a simple User model) 
 * operator for validation (currently : OR, NOT and IS)
 * simple web framework integration
 * import/export to json

A quick example
===============

Document are enhanced python dictionnary with a ``validate()`` method.
A Document declaration look like that::

    >>> from mongokit import *
    >>> import datetime

    >>> class BlogPost(Document):
    ...     db_name = 'test'
    ...     collection_name = 'tutorial'
    ...     structure = {
    ...             'title':unicode,
    ...             'body':unicode,
    ...             'author':unicode,
    ...             'date_creation':datetime.datetime,
    ...             'rank':int
    ...     }
    ...     required_fields = ['title','author', 'date_creation']
    ...     default_values = {'rank':0, 'date_creation':datetime.datetime.utcnow}
    ... 

We fire a connection and register our objects.

    >>> con = Connection()
    >>> con.register([BlogPost])
    >>> blogpost = con.test.example.BlogPost() # this use the db "test" and the collection "example"
    >>> blogpost['title'] = u'my title'
    >>> blogpost['body'] = u'a body'
    >>> blogpost['author'] = u'me'
    >>> blogpost
    {'body': u'a body', 'title': u'my title', 'date_creation': datetime.datetime(...), 'rank': 0, 'author': u'me'}
    >>> blogpost.save()
   
Saving the object will call the `validate()` method.

And you can use more complex structure::

    >>> class ComplexDoc(Document):
    ...     db_name = 'test'
    ...     collection_name = 'tutorial'
    ...     structure = {
    ...         "foo" : {"content":int},
    ...         "bar" : {
    ...             int:{unicode:int}
    ...         }
    ...     }
    ...     required_fields = ['foo.content', 'bar.$int']
     
Please, see the tutorial_ for more examples.

.. _tutorial : http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html

Suggestion and patches are really welcome. If you find mistakes in the documentation
(english is not my primary langage) feel free to contact me. You can find me (namlook) 
on the freenode #mongodb irc channel or on twitter_.

.. _twitter : http://twitter.com/namlook

Change Log
==========

v0.5
----
 * refactoring API which is getting much much more cleaner. Please see the migration_ page to keep your code up to date
 * 100% code coverage by 148 unit tests
 * lot of bug fix (too many to list them here)
 * add document size validation
 * add cross database reference support

.. _migration : http://bytebucket.org/namlook/mongokit/wiki/html/migration.html

v0.4
----
    * add autoref support to belong_to (delete cascade)
      (http://bytebucket.org/namlook/mongokit/wiki/html/cascade.html#delete-cascade)
    * changing collection dynamically 
      (http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html#changing-collection-dynamically)
    * add immutable field (python tuple support)
      (http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html#case-of-tuple-or-immutable-field)
    * add direction and ttl to index support
      (http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html#indexes)
    * add connection sharing support
      (http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html#sharing-connection)
    * add json import/export for MongoDocument
      (http://bytebucket.org/namlook/mongokit/wiki/html/tutorial.html#json-support)
    * full relation support (related_to)
      (http://bytebucket.org/namlook/mongokit/wiki/html/relations.html)
    * add long type support

v0.3.3
------

   * add autoref support (thanks to @bwmcadams)
   * add mongodb index support (thanks to @marcammann) 
   * adding CustomType (original idea from Phillip Oldham) 
   * support now all type of subclassed supported type 
   * add "delete cascade" feature
   * add the possibility to skip the validation layer for more performances
   * fix issue while passing queries to fetch() and update tutorial 
   * self._collection must not be None in __init__ 
   * fix #11 - pylons_env extension documentation typo 
   * add more complete test + docstring 
   * fix issue #9 - bug with custom_types and nested dict in list 
